 1. public class Booksrating
    {
        public int id { get; set; }
        public BooksratingValue BooksratingValue { get; set; }
        public int bookId { get; set; }
        [ForeignKey("bookId")]
        public Books? book { get; set; }
        public int userId { get; set; }
        [ForeignKey("userId")]
        public User? users { get; set; } 
    }
}


2. public enum BooksratingValue
    {
        OneStar = 1,
     TwoStar = 2,
     ThreeStar = 3,
     FourStar = 4,
     FiveStar = 5
    }

3. [HttpGet("BookidUserId/{bookId}")]
        public IActionResult GetratingsByBookidanduserid(int bookId,int userId)
        {
            var bookRatings = _bookrating.GetratingsByBookidanduserid(bookId,userId);
            return Ok(bookRatings);
        }

1 is model, 2 is eum value, 3 is controller,https://localhost:7247/api/Rating/BookidUserId/${bookId}?userId=${userId}

ab react mai value get krke show krbani hai BooksratingValue ki ,kii is userId n is bookId per kya rating di hai 
// import React, { useEffect, useState } from 'react';
// import axios from 'axios';
// import './MyOrder.css';
// import Swal from 'sweetalert2'

// const Myreadouts = () => {
//   const [orders, setOrders] = useState([]);
//   const token = localStorage.getItem('token');
//   const [rating, setRating] = useState({});
  
//   useEffect(() => {
//     if (token) {
//       fetchOrders();
//     };
//   }, [token]);

//   const getUserIdFromToken = () => {
//     try {
//       const base64Url = token.split('.')[1];
//       const base64 = base64Url.replace('-', '+').replace('_', '/');
//       const decodedToken = JSON.parse(window.atob(base64));
//       return decodedToken.unique_name;
//     } catch (error) {
//       console.error('Error decoding token:', error);
//       return null;
//     }
//   };
//   const fetchOrders = async () => {
//     const userId = getUserIdFromToken();

//     if (userId) {
//       try {
//         const response = await axios.get(`https://localhost:7247/api/Orders/myreadoutbooks/${userId}`);
//         const ordersData = response.data;

//         const ordersWithTitlesAndUsers = await Promise.all(
//           ordersData.map(async (order) => {
//             const book = await fetchBookTitle(order.bookId);
//             const user = await fetchUserDetails(order.userId);
//             return { ...order, book: book, user: user };
//           })
//         );
//         setOrders(ordersWithTitlesAndUsers);
//       } catch (error) {
//         console.error('Error fetching orders:', error);
//       }
//     }
//   };

//   const fetchBookTitle = async (bookId) => {
//     try {
//       const response = await axios.get(`https://localhost:7247/api/Books/${bookId}`);
//       return response.data; 
//     } catch (error) {
//       console.error('Error fetching book title:', error);
//       return 'Book Title Not Found'; 
//     }
//   };

//   const fetchUserDetails = async (userId) => {
//     try {
//       const response = await axios.get(`https://localhost:7247/api/User/${userId}`);
//       return response.data; 
//     } catch (error) {
//       console.error('Error fetching user details:', error);
//       return { name: 'User Not Found' }; 
//     }
//   };

//   const formatDate = (dateString) => {
//     const date = new Date(dateString);
//     return date.toLocaleDateString();
//   };

//   const handleRatingChange = (event, order) => {
//     const updatedRatingValues = { ...rating };
//     updatedRatingValues[order.id] = parseInt(event.target.value);
//     setRating(updatedRatingValues);
//   };
//   const handleSubmit = async (event, order) => {
//     event.preventDefault();
//     const booksRatingValue = rating[order.id];
//     if (booksRatingValue) {
//       try {
//         const response = await axios.post('https://localhost:7247/api/Rating', {
//           booksRatingValue,
//           userId: order.userId,
//           bookId: order.bookId,
//         });
//         ratingAlert();
//         setRating('');
//         console.log('Rating submitted successfully');
//       } catch (error) {
//         console.log('Something went wrong:', error);
//       }
//     } else {
//       ratingerror();
//     }
//   };
//   const ratingAlert = () => {
//     Swal.fire({  
//         title: 'Rating Done successfully',  
//         text: 'Thanku for giving rating',
//         icon: 'success'
//       }); 
// }
//  const ratingerror=()=>{
//   Swal.fire({
//     title: 'Error',
//     text: 'Please select a rating ',
//     icon: 'error'
//   });
//  }
//   return (
//     <div className="orders-container">
//       <h1>My Orders</h1>
//       <div className="approved-orders">
//         <h2>ReadOuts Orders</h2>
//         {orders.length === 0 ? (
//           <p className="text-danger center">No results found</p>
//         ) : (
//           orders.map((order) => (
//             order.isApproved && (
//               <div key={order.id} className="order-details">
//                 <img src={order.book.image} alt="Book Image" />
//                 <div className="order-info">
//                   <p>
//                     <b>Book Name:</b> {order.book.title}<br />
//                     <b>Email:</b> {order.user.email}<br />
//                     <b>Contact No:</b> {order.user.mobile}<br />
//                     <b>Order Date:</b> {formatDate(order.createdOn)}<br />
//                     <b>Last Return Date:</b> {formatDate(order.retrunOn)}<br />
//                     <b>Book Status:</b> Done<br/>
//                     <b>Give Rating:</b>
//                     <select
//                       value={rating[order.id] || ''}
//                       onChange={(e) => handleRatingChange(e, order)}
//                     >
//                       <option value="">Select Rating</option>
//                       <option value="1">1</option>
//                       <option value="2">2</option>
//                       <option value="3">3</option>
//                       <option value="4">4</option>
//                       <option value="5">5</option>
//                     </select>
//                     <button onClick={(e) => handleSubmit(e, order)}>Submit</button>
//                   </p>
//                 </div>
//               </div>
//             )
//           ))
//         )}
//       </div>
//     </div>
//   );
// };
// export default Myreadouts;


is code mai rating show krbani last return date k baad ki ky rating aayi backend say or  bookid baar baar change ho rhi hai order loop mai isliye jo orderid ho usi ki bookId call ho userid token say decode krr k aa jayegi order.id==bookId or jaise nye order ki rating krbani show to bookId us order ki key id ho
