A curd operation in a class-based component refers to the basic operations that can be performed on data in a database, such as creating, reading, updating, and deleting data. In React, these operations are typically performed using HTTP requests to an API.

Here is an example of how a curd operation can be implemented in a class-based component:


import React, { Component } from 'react';
import axios from 'axios';

class ExampleComponent extends Component {
  state = {
    data: [],
    error: null,
    loading: false,
    formData: {
      name: '',
      age: '',
      email: '',
    },
  };

  componentDidMount() {
    this.fetchData();
  }

  fetchData = async () => {
    try {
      this.setState({ loading: true });
      const response = await axios.get('/api/data');
      this.setState({ data: response.data, loading: false });
    } catch (error) {
      this.setState({ error, loading: false });
    }
  };

  handleChange = (event) => {
    const { name, value } = event.target;
    this.setState((prevState) => ({
      formData: {
        ...prevState.formData,
        [name]: value,
      },
    }));
  };

  handleSubmit = async (event) => {
    event.preventDefault();
    try {
      this.setState({ loading: true });
      const response = await axios.post('/api/data', this.state.formData);
      this.setState((prevState) => ({
        data: [...prevState.data, response.data],
        formData: {
          name: '',
          age: '',
          email: '',
        },
        loading: false,
      }));
    } catch (error) {
      this.setState({ error, loading: false });
    }
  };

  handleDelete = async (id) => {
    try {
      this.setState({ loading: true });
      await axios.delete(/api/data/${id});
      const newData = this.state.data.filter((item) => item.id !== id);
      this.setState({ data: newData, loading: false });
    } catch (error) {
      this.setState({ error, loading: false });
    }
  };

  render() {
    const { data, error, loading, formData } = this.state;
    return (
      <div>
        {loading && <p>Loading...</p>}
        {error && <p>Error: {error.message}</p>}
        <form onSubmit={this.handleSubmit}>
          <label>
            Name:
            <input type="text" name="name" value={formData.name} onChange={this.handleChange} />
          </label>
          <label>
            Age:
            <input type="number" name="age" value={formData.age} onChange={this.handleChange} />
          </label>
          <label>
            Email:
            <input type="email" name="email" value={formData.email} onChange={this.handleChange} />
          </label>
          <button type="submit">Add</button>
        </form>
        <ul>
          {data.map((item) => (
            <li key={item.id}>
              {item.name} ({item.age}) - {item.email}
              <button onClick={() => this.handleDelete(item.id)}>Delete</button>
            </li>
          ))}
        </ul>
      </div>
    );
  }
}

export default ExampleComponent;


In this example, we have a component that displays a list of data and allows the user to add new items and delete existing ones. The state object contains an array of data objects, as well as an error message and a loading flag to indicate when the component is fetching data from the API.

The componentDidMount method is called when the component is first mounted and calls the fetchData method to populate the data array.

The handleChange method is called whenever the user types into one of the input fields, and updates the formData object in the component's state.

The handleSubmit method is called when the user submits the form to add a new item to the list. It sends a POST request to the API with the data from t