Library-Libraries offer specific functionalities that developers can use within their own codebase.(redux,api package )
Framework- frameworks provide a complete structure and set of tools that developers must work within to build their applications.(redux, api package or bi package begera install krne ki jrurt nhi )


#Why react is created when facebook have javascript?

---It was created to address the challenges of developing large-scale applications with complex UI components. While Facebook already had JavaScript, they wanted a more efficient and maintainable way to build UI components that could be reused across their various projects.

---Component-Based Architecture: React promotes a component-based architecture, where UI elements are divided into reusable and self-contained components. Components encapsulate their own logic and state, making it easier to manage and reuse code. This modular approach simplifies development, maintenance, and testing, as components can be composed and nested hierarchically to build complex UI structures

---JSX: React uses JSX (JavaScript XML), which is an extension to JavaScript that allows developers to write HTML-like syntax within JavaScript code. JSX makes it easier to describe the structure and appearance of UI components, enhancing the readability and maintainability of code.




Lifecycle plays a big role when it comes to the timing of rendering. For class components, we had a method like componentDidMount() that was called immediately after the first render was completed, componentWillMount() that was called before the first rendering, however, this method is considered legacy, so it is not recommended to use this method in newer versions of React and we also had componentDidUpdate() which was invoked immediately after updating occurs. Itâ€™s a lifecycle method that runs every time a component gets new props, or a state change happens. This method is not called during the initial rendering.

When we talk about functional components, there is a hook that is great for this purpose. React useEffect Hook serves the same purpose as componentDidMount(), componentDidUpdate() and componentWillUnmount().



One disadvantage of class-based components compared to hooks is that they can be more verbose and harder to understand for developers who are not familiar with object-oriented programming. Class-based components require the use of the "this" keyword, which can be confusing and lead to errors. Additionally, lifecycle methods can be difficult to manage and can result in bloated code. Hooks provide a more intuitive and streamlined approach to managing state and lifecycle methods, making it easier for developers to create and maintain React components.
React introduced hooks to provide a way to use stateful logic in functional components, which were previously limited to only using props and context. Hooks allow developers to reuse stateful logic across multiple components, making code more modular and easier to maintain. Additionally, hooks simplify the process of managing component state and lifecycle methods, reducing the amount of boilerplate code required. Overall, hooks provide a more flexible and powerful way to build complex UIs with React.


1. Improved code readability and simplicity: Hooks provide a more streamlined and intuitive approach to managing state and lifecycle methods in React components, making the code easier to read and understand.

2. Better reusability: Hooks allow developers to reuse stateful logic across multiple components, reducing code duplication and making it easier to manage complex component hierarchies.

3. Simplified testing: Functional components with hooks are easier to test than class-based components, as they do not require the use of complex mocking frameworks.

4. No need for "this" keyword: Hooks eliminate the need for the "this" keyword, which can be confusing and lead to errors if used incorrectly in class-based components.

5. Improved performance: Hooks can improve performance by reducing the amount of boilerplate code required in class-based components, resulting in faster rendering times and better overall performance.

6. Better compatibility with other libraries: Hooks are designed to work well with other libraries and frameworks, making it easier to integrate React with other parts of your application.




Class components and functional components are two ways to define components in React, and each has its own syntax and characteristics. Here are the main differences between class components and functional components in React:

1. **Syntax:**
   - **Class Component:** Class components are defined using JavaScript classes, extending the `React.Component` class. They use a `render` method to define the component's UI.
   - **Functional Component:** Functional components are defined as JavaScript functions. They receive `props` as an argument and return JSX to define the component's UI.

2. **State:**
   - **Class Component:** Class components can define and manage component state using the `this.state` property and `this.setState()` method. State can be initialized in the constructor.
   - **Functional Component:** Functional components can now manage state using hooks like `useState`. State is managed as variables within the function body.

3. **Lifecycle Methods:**
   - **Class Component:** Class components have access to various lifecycle methods such as `componentDidMount`, `componentDidUpdate`, and `componentWillUnmount` for handling side effects and component updates.
   - **Functional Component:** Functional components use the `useEffect` hook to handle side effects and mimic some lifecycle behavior. It allows you to perform actions after the component renders or when specific dependencies change.

4. **`this` Keyword:**
   - **Class Component:** Class components use the `this` keyword to access props and state. Event handlers need to be explicitly bound to `this` to avoid issues.
   - **Functional Component:** Functional components don't use `this`, which can reduce confusion related to binding.

5. **Complexity:**
   - **Class Component:** Class components can become more complex as component logic and lifecycle methods are added. They may involve more boilerplate code.
   - **Functional Component:** Functional components with hooks are typically more concise and readable, making them a better choice for simpler components.

6. **Code Reusability:**
   - **Class Component:** Code reusability between class components is achieved through patterns like higher-order components (HOCs) or render props.
   - **Functional Component:** Hooks encourage code reusability through custom hooks, which allow you to encapsulate and share component logic.

7. **Component Hierarchy:**
   - **Class Component:** Class components can lead to deep component hierarchies as logic is split between parent and child components.
   - **Functional Component:** Functional components with hooks encourage a flatter component hierarchy by allowing multiple hooks in a single component.

8. **Ecosystem and Community:**
   - **Class Component:** Class components were the traditional way of defining React components and are still supported. However, the React community is moving towards functional components with hooks.
   - **Functional Component:** Functional components with hooks are now the recommended way to write components in React, and they have become the standard in modern React development.

9. **Learning Curve:**
   - **Class Component:** Class components may have a steeper learning curve for developers new to React, as they involve understanding class syntax and lifecycle methods.
   - **Functional Component:** Functional components with hooks have a lower learning curve and are often easier for newcomers to grasp.

In summary, while class components are still supported in React and may be necessary for legacy codebases, functional components with hooks are the preferred choice for new projects and offer a more modern and concise way to build React components. They promote code reusability, maintainability, and a more predictable component model.

